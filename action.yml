name: gha-versioning
description: |
  Create (or override existing) vX and vX.Y based on the provided tag.
  Useful to maintain GitHub Action tags up to date.
branding:
  icon: tag
  color: yellow

inputs:
  tag:
    description: The full tag used to generate vX and vX.Y tags
    required: false
    default: ${{ github.event.release.tag_name }}
  update-inner-releases:
    description: |
      Whether to also update releases name linked to `vX` and `vX.Y` tags.
      Will work only on pre-existing releases !
    required: false
    default: 'false'
  inner-releases-as-latest:
    description: |
      Whether to set inner releases as latest. Requires `update-inner-releases` at `true` !
      - `auto`: Will be set only if releases linked to provided `tag` is the latest
      - `true`: Set as latest whatever provided `tag` releases is the latest or not
      - `false`: Do not set them as latest
    required: false
    default: 'auto'
  git-email:
    description: The email for the GIT user creating the tags
    required: false
    default: 'github-actions[bot]@users.noreply.github.com'
  git-name:
    description: The name for the GIT user creating the tags
    required: false
    default: 'github-actions[bot]'
  working-directory:
    description: |
      Directory to the Git repository to tag.
      Useful only if you checkout it in a specific location !
    required: false
    default: '${{ github.workspace }}'

outputs:
  minor-tag:
    description: Minor tag created (vX.Y)
    value: ${{ steps.generate-tags.outputs.minor }}
  major-tag:
    description: Major tag created (vX)
    value: ${{ steps.generate-tags.outputs.major }}

runs:
  using: composite
  steps:
    # Even if an input is marked as "required", empty/no value may be passed !
    - shell: bash
      id: validate
      env:
        FULL_TAG: ${{ inputs.tag }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Validate provided tag ...

        if [[ "${FULL_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo 'tag-type=full' >> "${GITHUB_OUTPUT}"
        elif [[ "${FULL_TAG}" =~ ^v[0-9]+\.[0-9]+$ ]]; then
          echo '::notice::Minor tag detected, skipping process'
          echo 'tag-type=minor' >> "${GITHUB_OUTPUT}"
        elif [[ "${FULL_TAG}" =~ ^v[0-9]+$ ]]; then
          echo '::notice::Major tag detected, skipping process'
          echo 'tag-type=major' >> "${GITHUB_OUTPUT}"
        else
          echo '::error::Invalid tag format (expected vX.Y.Z) !'
          exit 1
        fi

    - id: generate-tags
      if: ${{ steps.validate.outputs.tag-type == 'full' }}
      shell: bash
      env:
        FULL_TAG: ${{ inputs.tag }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Generate vX and vX.Y tags
        echo "Original tag -> ${FULL_TAG}"

        MINOR_TAG=$(echo "${FULL_TAG}" | cut -d '.' -f 1-2);
        echo "Minor tag -> ${MINOR_TAG}"
        if ! [[ "${MINOR_TAG}" =~ ^v[0-9]+\.[0-9]+$ ]]; then
          echo '::error::Invalid minor tag format (expected vX.Y) !'
          exit 1
        fi
        echo "minor=${MINOR_TAG}" >> "${GITHUB_OUTPUT}"

        MAJOR_TAG=$(echo "${FULL_TAG}" | cut -d '.' -f 1);
        echo "Major tag -> ${MAJOR_TAG}"
        if ! [[ "${MAJOR_TAG}" =~ ^v[0-9]+$ ]]; then
          echo '::error::Invalid major tag format (expected vX) !'
          exit 1
        fi
        echo "major=${MAJOR_TAG}" >> "${GITHUB_OUTPUT}"

    - shell: bash
      if: ${{ steps.validate.outputs.tag-type == 'full' }}
      env:
        FULL_TAG: ${{ inputs.tag }}
        MINOR_TAG: ${{ steps.generate-tags.outputs.minor }}
        MAJOR_TAG: ${{ steps.generate-tags.outputs.major }}
        GIT_EMAIL: ${{ inputs.git-email }}
        GIT_NAME: ${{ inputs.git-name }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Create & push tags

        # User email and name are required when -m is used !
        (
          git config --global user.email "${GIT_EMAIL}" && \
          git config --global user.name "${GIT_NAME}" \
        ) || exit 1

        # Update the original tag BUT keep the original message !
        git tag -l --format='%(contents)' "${FULL_TAG}" > ./TAG_MSG || exit 1

        (git tag -f "${MAJOR_TAG}" -m "Linked to ${FULL_TAG} tag" "${FULL_TAG}^{}" && \
          git tag -f "${MINOR_TAG}" -m "Linked to "${FULL_TAG}" tag" "${FULL_TAG}^{}" && \
          sleep 1 && git tag -f "${FULL_TAG}" -F ./TAG_MSG "${FULL_TAG}^{}" && \
          git push origin --force "${MINOR_TAG}" "${MAJOR_TAG}" "${FULL_TAG}" \
        ) || exit 1

    - shell: bash
      if: ${{ steps.validate.outputs.tag-type == 'full' && inputs.update-inner-releases == 'true' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        FULL_TAG: ${{ inputs.tag }}
        MINOR_TAG: ${{ steps.generate-tags.outputs.minor }}
        MAJOR_TAG: ${{ steps.generate-tags.outputs.major }}
        LATEST_MODE: ${{ inputs.inner-releases-as-latest }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Update inner releases
        MINOR_RELEASE_EXISTS=$( (gh release view "${MINOR_TAG}" --json id -q .id | wc -l | tr -d '[:space:]') || echo 0);
        MAJOR_RELEASE_EXISTS=$( (gh release view "${MAJOR_TAG}" --json id -q .id | wc -l | tr -d '[:space:]') || echo 0);
        if [[ "${MINOR_RELEASE_EXISTS}${MAJOR_RELEASE_EXISTS}" -eq 0 ]]; then
          echo '::warning::No inner release to update !'
          exit 0
        fi
        PARAMS="--title ${FULL_TAG}"
        if [[ "${LATEST_MODE}" = "true" || ( "${LATEST_MODE}" = "auto" && "`gh repo view --json latestRelease -q .latestRelease.tagName`" = "${FULL_TAG}" ) ]]; then
          PARAMS+=' --latest'
        fi
        if ! [[ "${MINOR_RELEASE_EXISTS}" -eq 0 ]]; then
          echo "Updating minor release ${MINOR_TAG} with '${PARAMS}'"
          gh release edit ${MINOR_TAG} ${PARAMS}
        fi
        # Update major release at the end, so it will become the latest if --latest is used !
        if ! [[ "${MAJOR_RELEASE_EXISTS}" -eq 0 ]]; then
          echo "Updating major release ${MAJOR_TAG} with '${PARAMS}'"
          gh release edit ${MAJOR_TAG} ${PARAMS}
        fi
